def func(numbers):
    total = 0
    #State of the program here: numbers is a list of integers, total is 0
    count = 0
    #State of the program here: `numbers` is a list of integers, `total` is 0, `count` is 0
    while numbers:
        num = numbers.pop()
        
        if num > 1:
            total += num
            count += 1
        else:
            print('Skipping non-positive number:', num)
        
    #State of the program after the loop has been executed: If numbers is not empty, `total` is the sum of all removed integers greater than 1, `count` is the number of removed integers greater than 1. If numbers is empty, `total` and `count` remain unchanged. If a non-positive integer is removed, the program prints a message and does not modify `total` or `count`. After the loop, `numbers` is an empty list.
    try:
        average = total / count
        #State of the program here: If numbers is not empty, `total` is the sum of all removed integers greater than 1, `count` is the number of removed integers greater than 1. If numbers is empty, `total` and `count` remain unchanged. If a non-positive integer is removed, the program prints a message and does not modify `total` or `count`. After the loop, `numbers` is an empty list, and `average` is the calculated average of `total` and `count
    #State of the program after the try block has been executed: If numbers is not empty, `total` is the sum of all removed integers greater than 1, `count` is the number of removed integers greater than 1. If numbers is empty, `total` and `count` remain unchanged. If a non-positive integer is removed, the program prints a message and does not modify `total` or `count`. After the loop, `numbers` is an empty list, and `average` is the calculated average of `total` and `count
    except (ZeroDivisionError):
        average = None
        #State of the program here: `average` is assigned the value `None`
    #State of the program after the except block has been executed: `average` is assigned the value `None`
    #State of the program after the try-except block has been executed: If numbers is not empty, `total` is the sum of all removed integers greater than 1, `count` is the number of removed integers greater than 1. If numbers is empty, `total` and `count` remain unchanged. If a non-positive integer is removed, the program prints a message and does not modify `total` or `count`. After the loop, `numbers` is an empty list, and `average` is the calculated average of `total` and `count, or `None` if `count` is 0.
    return average
    #State of the program after the return statement: If numbers is not empty, `total` is the sum of all removed integers greater than 1, `count` is the number of removed integers greater than 1. If numbers is empty, `total` and `count` remain unchanged. If a non-positive integer is removed, the program prints a message and does not modify `total` or `count`. After the loop, `numbers` is an empty list, and `average` is the calculated average of `total` and `count, or `None` if `count` is 0, and the function returns the value of `average`
#Overall this is what the function does: The function accepts a parameter `numbers`, performs specific operations on the list, and returns the calculated average if it is not empty. If the list is empty, it returns None.
If numbers is not empty, `total` is the sum of all removed integers greater than 1, `count` is the number of removed integers greater than 1. If numbers is empty, `total` and `count` remain unchanged. If a non-positive integer is removed, the program prints a message and does not modify `total` or `count`. After the loop, `numbers` is an empty list, and `average` is the calculated average of `total` and `count, or `None` if `count` is 0, and the function returns the value of `average`

