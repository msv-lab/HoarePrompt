def is_prime(num):
    if (num < 2) :
        return False
        #State of the program after the return statement: No variables are affected. The function simply returns False.
    #State of the program after the if block has been executed: *l, r, and k are integers such that 1 <= l <= r < 10^18, and 1 <= k <= 10. If num is less than 2, the function returns False.
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
        
    #State of the program after the  for loop has been executed: If `num` is less than 2, the function returns False. Otherwise, after the loop executes, `l` and `r` are integers such that 1 <= `l` <= `r` < 10^18, `k` is an integer such that 1 <= `k` <= 10, `num` is greater than or equal to 2. If `num` is divisible by any number between 2 and int(num
    return True
    #State of the program after the return statement: If `num` is less than 2, the function returns False. Otherwise, after the loop executes, `l` and `r` are integers such that 1 <= `l` <= `r` < 10^18, `k` is an integer such that 1 <= `k` <= 10, `num` is greater than or equal to 2. If `num` is divisible by any number between 2 and int(num), the function returns True
#Overall this is what the function does: The function `is_prime` accepts a parameter `num`. `num` is an integer. 
#
#Case_1: If `num` is less than 2, the function returns False.
#
#Case_2: If `num` is less than 2, the function returns False. Otherwise, after the loop executes, `l` and `r` are integers such that 1 <= `l` <= `r` < 10^18, `k` is an integer such that 1 <= `k` <= 10, `num` is greater than or equal to 2. If `num` is divisible by any number between 2 and int(num), the function returns True.
#
#Case_3: If `num` is less than 2, the function returns False. Otherwise, after the loop executes, `l` and `r` are integers such that 1 <= `l` <= `r` < 10^18, `k` is an integer such that 1 <= `k` <= 10, `num` is greater than or equal to 2. If `num` is divisible by any number between 2 and int(num), the function returns True.
#
#Therefore, the functionality of the function `is_prime` is to accept an integer `num` and return True if `num` is a prime number, and False if it is not. If `num` is less than 2, it returns False.
Case_1: *l, r, and k are integers such that 1 <= l <= r < 10^18, and 1 <= k <= 10. If num is less than 2, the function returns False.

Case_2: If `num` is less than 2, the function returns False. Otherwise, after the loop executes, `l` and `r` are integers such that 1 <= `l` <= `r` < 10^18, `k` is an integer such that 1 <= `k` <= 10, `num` is greater than or equal to 2. If `num` is divisible by any number between 2 and int(num

Case_3: If `num` is less than 2, the function returns False. Otherwise, after the loop executes, `l` and `r` are integers such that 1 <= `l` <= `r` < 10^18, `k` is an integer such that 1 <= `k` <= 10, `num` is greater than or equal to 2. If `num` is divisible by any number between 2 and int(num), the function returns True

